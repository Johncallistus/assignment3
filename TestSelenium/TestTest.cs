// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class TestTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  [Test]
  public void test2() {
    driver.Navigate().GoToUrl("http://localhost/triangleSolver/");
    driver.Manage().Window.Size = new System.Drawing.Size(1061, 812);
    driver.FindElement(By.Id("firstSide")).Click();
    driver.FindElement(By.Id("firstSide")).SendKeys("6");
    driver.FindElement(By.Id("secondSide")).Click();
    driver.FindElement(By.Id("secondSide")).SendKeys("6");
    driver.FindElement(By.Id("thirdSide")).Click();
    driver.FindElement(By.Id("thirdSide")).SendKeys("6");
    driver.FindElement(By.Id("btnSubmit")).Click();
    driver.FindElement(By.CssSelector("body")).Click();
        string actual = driver.FindElement(By.Id("triangleType")).GetAttribute("value");
        string actual1 = driver.FindElement(By.XPath("//input[@name='triangleType']")).Text;
        Assert.That(vars["id=triangleType"].ToString(), Is.EqualTo("Equilateral triangle"));
  }
}
